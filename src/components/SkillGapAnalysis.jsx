// src/components/SkillGapAnalysis.jsx
import React, { useState, useMemo } from 'react';
import { marked } from 'marked';
import AIFeedback from './AIFeedback';

const TARGET_ROLES = {
  "Full Stack Developer": ['JavaScript', 'React', 'Node.js', 'SQL', 'HTML', 'CSS', 'Git', 'Docker', 'AWS'],
  "Data Analyst": ['Python', 'SQL', 'MySQL', 'Power BI', 'MS Excel', 'Pandas', 'Statistics'],
  "Cloud Specialist": ['AWS', 'Docker', 'Kubernetes', 'Networking', 'Python', 'Git', 'Terraform'],
};

const escapeRegExp = (string) => {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
};

export default function SkillGapAnalysis({ resumeText }) {
  const [selectedRole, setSelectedRole] = useState("Full Stack Developer");
  const [aiResponse, setAiResponse] = useState('');
  const [isLoadingAI, setIsLoadingAI] = useState(false);
  const [aiError, setAiError] = useState(null);

  const analysis = useMemo(() => {
    if (!resumeText) return { matched: [], missing: TARGET_ROLES[selectedRole], matchPercentage: 0 };
    const text = resumeText.toLowerCase();
    const coreSkills = TARGET_ROLES[selectedRole];
    const matchedSkills = coreSkills.filter(skill => {
      const regex = new RegExp(`\\b${escapeRegExp(skill.toLowerCase())}\\b`, 'i');
      return regex.test(text);
    });
    const missingSkills = coreSkills.filter(skill => !matchedSkills.includes(skill));
    const matchPercentage = Math.round((matchedSkills.length / coreSkills.length) * 100);
    return { matched: matchedSkills, missing: missingSkills, matchPercentage };
  }, [resumeText, selectedRole]);

  // -----------------------
  // 🧠 Simulated AI Feedback
  // -----------------------
  const handleGetAIFeedback = async () => {
    try {
      setIsLoadingAI(true);
      setAiError(null);
      setAiResponse('');

      console.log('Simulating AI feedback generation...');
      console.log('Selected role:', selectedRole);
      console.log('Resume text length:', resumeText?.length || 0);

      // Simulate AI "thinking" delay
      await new Promise(resolve => setTimeout(resolve, 2500));

      const mockResponse = `# 🧠 AI-Powered Resume Analysis for ${selectedRole}

## Resume Improvement Suggestions

Based on your resume analysis, here are personalized recommendations to improve your chances for a **${selectedRole}** position:

### 🌟 Strengths to Highlight
- **Skills Match:** You currently have a ${analysis.matchPercentage}% alignment with the target role requirements.
- **Strong Areas:** ${analysis.matched.length > 0 ? analysis.matched.slice(0, 3).join(', ') : 'Focus on strengthening your technical core.'}
- Clear structure and professional formatting that communicates your experience effectively.

### ⚠️ Areas for Improvement
- **Missing Skills:** ${analysis.missing.length > 0 ? analysis.missing.slice(0, 3).join(', ') : 'No major gaps detected — great job!'}
- **Quantify Achievements:** Add measurable outcomes (e.g., "Improved API performance by 25%").
- **Project Examples:** Showcase 2–3 key projects that highlight your technical depth.

## 🧩 Skill-Gap Action Plan

### Immediate Actions (Next 2–4 Weeks)
1. **Focus on Missing Skills:** Prioritize learning ${analysis.missing.length > 0 ? analysis.missing[0] : 'JavaScript'} and ${analysis.missing.length > 1 ? analysis.missing[1] : 'React'}.
2. **Build Portfolio Projects:** Create 1–2 short projects applying these skills.
3. **Update Resume:** Add these new projects and highlight practical impact.

### Medium-Term Goals (1–3 Months)
1. **Certifications or Courses:** Take online training for ${selectedRole}.
2. **Coding Practice:** Use LeetCode or HackerRank regularly to sharpen your problem-solving.
3. **Networking:** Engage with developer communities and share your work.

### Long-Term Strategy (3–6 Months)
1. **Deepen Expertise:** Advance to intermediate/advanced topics in ${selectedRole === 'Full Stack Developer' ? 'React and Node.js' : selectedRole}.
2. **Gain Experience:** Contribute to open source, freelance, or internships.
3. **Professional Growth:** Earn certifications or mentorship to boost credibility.

---

✨ *Note: This is a simulated AI response created for demonstration purposes. In a live production environment, this section would be dynamically generated by an AI model such as Gemini or OpenAI.*`;

      setAiResponse(mockResponse);
    } catch (error) {
      console.error('Error in handleGetAIFeedback:', error);
      setAiError('Failed to generate AI feedback.');
    } finally {
      setIsLoadingAI(false);
    }
  };

  // -----------------------
  // 🧩 UI Rendering
  // -----------------------
  return (
    <div className="bg-white dark:bg-slate-800 p-8 rounded-xl shadow-lg space-y-6">
      <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4">
        <h3 className="text-2xl font-bold text-slate-900 dark:text-white">Target Role Skill Analysis</h3>
        <select
          value={selectedRole}
          onChange={(e) => setSelectedRole(e.target.value)}
          className="p-2 border border-slate-300 rounded-lg bg-white dark:bg-slate-700 dark:border-slate-600 focus:ring-2 focus:ring-indigo-500"
        >
          {Object.keys(TARGET_ROLES).map(role => (
            <option key={role} value={role}>{role}</option>
          ))}
        </select>
      </div>

      {/* Role Match Progress Bar */}
      <div>
        <div className="flex justify-between mb-1">
          <span className="text-base font-medium text-indigo-700 dark:text-white">Role Match</span>
          <span className="text-sm font-medium text-indigo-700 dark:text-white">{analysis.matchPercentage}%</span>
        </div>
        <div className="w-full bg-slate-200 rounded-full h-4 dark:bg-slate-700">
          <div
            className="bg-indigo-600 h-4 rounded-full transition-all duration-500"
            style={{ width: `${analysis.matchPercentage}%` }}
          ></div>
        </div>
      </div>

      {/* Matched Skills */}
      <div>
        <h4 className="text-lg font-semibold text-green-600 dark:text-green-400 mb-3">
          Matched Skills ({analysis.matched.length})
        </h4>
        <div className="flex flex-wrap gap-3">
          {analysis.matched.length > 0 ? (
            analysis.matched.map(skill => (
              <span
                key={skill}
                className="bg-green-100 text-green-800 text-sm font-medium px-3 py-1 rounded-full dark:bg-green-900 dark:text-green-200"
              >
                {skill}
              </span>
            ))
          ) : (
            <p className="text-slate-500 text-sm">
              No matched skills found for this role in the resume.
            </p>
          )}
        </div>
      </div>

      {/* Missing Skills */}
      <div>
        <h4 className="text-lg font-semibold text-yellow-600 dark:text-yellow-400 mb-3">
          Missing Skills ({analysis.missing.length})
        </h4>
        <div className="flex flex-wrap gap-3">
          {analysis.missing.map(skill => (
            <span
              key={skill}
              className="bg-yellow-100 text-yellow-800 text-sm font-medium px-3 py-1 rounded-full dark:bg-yellow-900 dark:text-yellow-200"
            >
              {skill}
            </span>
          ))}
        </div>
      </div>

      {/* AI Feedback Button */}
      <div className="border-t border-slate-200 dark:border-slate-700 pt-6 text-center">
        <p className="text-slate-600 dark:text-slate-400 mb-4">
          Go beyond keywords. Get a personalized analysis of your resume's strengths and weaknesses.
        </p>
        <button
          onClick={handleGetAIFeedback}
          disabled={isLoadingAI}
          className="w-full sm:w-auto bg-slate-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-slate-800 transition disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoadingAI ? '✨ Generating AI Feedback...' : 'Get Personalized AI Feedback'}
        </button>
      </div>

      {/* Error Display */}
      {aiError && (
        <div
          className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
          role="alert"
        >
          <strong className="font-bold">Error: </strong>
          <span className="block sm:inline">{aiError}</span>
          <button
            onClick={() => setAiError(null)}
            className="absolute top-0 bottom-0 right-0 px-4 py-3"
          >
            <span className="text-red-500 hover:text-red-700">✕</span>
          </button>
        </div>
      )}

      {/* AI Feedback Display */}
      {(aiResponse || isLoadingAI) && (
        <AIFeedback feedback={aiResponse} isLoading={isLoadingAI} />
      )}
    </div>
  );
}